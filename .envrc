# Orchestration file to load environment variables from the `.env` and `.secrets` files.
# Environment variables go here, and can be read in by Python using `os.getenv`:
#
# Only used by systems with `direnv` (https://direnv.net/) installed. Environment
# variables can be read in by Python using `os.getenv` _without_ using `python-dotenv`:
#
#   --------------------------------------------------------
#   import os
#
#   # Example variable
#   EXAMPLE_VARIABLE = os.getenv("EXAMPLE_VARIABLE")
#   --------------------------------------------------------
#
# To ensure the `sed` command below works correctly, make sure all file paths in environment variables are absolute
# (recommended), or are relative paths using other environment variables (works for Python users only). Environment
# variable names are expected to contain letters, numbers or underscores only.
#
# DO NOT STORE SECRETS HERE - this file is version-controlled! You should store secrets in a `.secrets` file, which is
# not version-controlled - this can then be sourced here, using `source_env ".secrets"`.

# Extract the variables to `.env` if required. Note `.env` is NOT version-controlled, so `.secrets` will not be committed
#sed -n 's/^export \(.*\)$/\1/p' .envrc .secrets | sed -e 's?$(pwd)?'"$(pwd)"'?g' | sed -e 's?$\([a-zA-Z0-9_]\{1,\}\)?${\1}?g' >> .env

# Add the working directory to `PYTHONPATH`; allows Jupyter notebooks in the `notebooks` folder to import `src/recsys23`
export PYTHONPATH="$PYTHONPATH:$(pwd)/src/recsys23"

# Load the `.env` file
dotenv .env

# Import secrets from an untracked file `.secrets` (if it exists)
dotenv_if_exists .secrets

eval "$(conda shell.bash hook)"
conda activate python3.10

source .venv-dev/bin/activate
# module load cudnn8.0-cuda11.2/8.0.5.39
